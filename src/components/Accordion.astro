---
interface Props {
  items: { question: string; answer: string }[];
}

const { items } = Astro.props;
---

<div class="accordion">
  {items.map((item, index) => (
    <div class="accordion-item mb-4">
      <button
        class="accordion-header w-full text-left px-6 py-4 bg-main-color-light text-main-color font-semibold rounded-md focus:outline-none flex justify-between items-center"
        aria-expanded="false"
        aria-controls={`accordion-content-${index}`}
      >
        {item.question}
        <svg class="w-6 h-6 ml-2 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>
      <div id={`accordion-content-${index}`} class="accordion-content hidden px-6 py-4 bg-main-color-light rounded-md mt-2">
        <p>{item.answer}</p>
      </div>
    </div>
  ))}
</div>

<script is:inline>
  document.addEventListener('astro:page-load', () => {
    const accordionItems = document.querySelectorAll('.accordion-item');
    
    accordionItems.forEach((item) => {
      const header = item.querySelector('.accordion-header');
      const content = item.querySelector('.accordion-content');
      
      header.addEventListener('click', () => {
        const expanded = header.getAttribute('aria-expanded') === 'true';
        
        // Fermer tous les autres éléments
        accordionItems.forEach((otherItem) => {
          if (otherItem !== item) {
            otherItem.querySelector('.accordion-header').setAttribute('aria-expanded', 'false');
            otherItem.querySelector('.accordion-content').classList.add('hidden');
            otherItem.querySelector('svg').classList.remove('rotate-180');
          }
        });
        
        // Basculer l'état de l'élément actuel
        header.setAttribute('aria-expanded', (!expanded).toString());
        content.classList.toggle('hidden');
        header.querySelector('svg').classList.toggle('rotate-180');
      });
    });
  });
</script>

<style define:vars={{ mainColor: 'var(--main-color)' }}>
  .accordion-header {
    background-color: var(--main-color-light);
    color: var(--main-color);
    transition: background-color 0.3s, color 0.3s;
  }
  .accordion-header:hover {
    background-color: var(--main-color);
    color: white;
  }
  .accordion-content {
    background-color: color-mix(in srgb, var(--main-color) 5%, white);
  }
  .rotate-180 {
    transform: rotate(180deg);
  }
</style>
